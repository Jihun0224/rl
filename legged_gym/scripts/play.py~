import sys
from legged_gym import LEGGED_GYM_ROOT_DIR
import os
import sys
from legged_gym import LEGGED_GYM_ROOT_DIR

import isaacgym
from legged_gym.envs import *
from legged_gym.utils import  get_args, export_policy_as_jit, task_registry, Logger

import numpy as np
import torch

import pdb
import json

def save_matrix_to_json(matrix, filename):
    """
    Saves a matrix to a JSON file.

    Args:
        matrix (list of lists or numpy.ndarray): The matrix to save.
        filename (str): The name of the file to save to.
    """
    if isinstance(matrix, np.ndarray):
        matrix = matrix.tolist()  # Convert numpy array to list

    with open(filename, 'w') as f:
        json.dump(matrix, f)
 

def play(args):
    env_cfg, train_cfg = task_registry.get_cfgs(name=args.task)
    # override some parameters for testing
    env_cfg.env.num_envs = min(env_cfg.env.num_envs, 100)
    env_cfg.terrain.num_rows = 5
    env_cfg.terrain.num_cols = 5
    env_cfg.terrain.curriculum = False
    env_cfg.noise.add_noise = False
    env_cfg.domain_rand.randomize_friction = False
    env_cfg.domain_rand.push_robots = False
    env_cfg.domain_rand.randomize_dof_wide = False

    env_cfg.env.test = True

    # prepare environment
    env, _ = task_registry.make_env(name=args.task, args=args, env_cfg=env_cfg)
    obs = env.get_observations()
    # load policy
    train_cfg.runner.resume = True
    ppo_runner, train_cfg = task_registry.make_alg_runner(env=env, name=args.task, args=args, train_cfg=train_cfg)
    policy = ppo_runner.get_inference_policy(device=env.device)
    
    # export policy as a jit module (used to run it from C++)
    if EXPORT_POLICY:
        path = os.path.join(LEGGED_GYM_ROOT_DIR, 'logs', train_cfg.runner.experiment_name, 'exported', 'policies')
        export_policy_as_jit(ppo_runner.alg.actor_critic, path)
        print('Exported policy as jit script to: ', path)

    rl_traj=[[0]*env.num_dofs]*int(env.max_episode_length-1)
    for i in range(10*int(env.max_episode_length)):
        actions = policy(obs.detach())
        obs, _, rews, dones, infos = env.step(actions.detach())

        if EXPORT_TRAJ:
            TRAJ_ITH=1  ## export trajectory @ which sequence
            if i>=((TRAJ_ITH-1)*int(env.max_episode_length)) and i<(TRAJ_ITH*int(env.max_episode_length)-1):
                iframe=i-(TRAJ_ITH-1)*int(env.max_episode_length)
                rl_traj[iframe]=[env.dof_pos[0,0].item(),env.dof_pos[0,1].item(),env.dof_pos[0,2].item(),
                    env.dof_pos[0,3].item(),env.dof_pos[0,4].item(),env.dof_pos[0,5].item(),
                    env.dof_pos[0,6].item(),env.dof_pos[0,7].item(),env.dof_pos[0,8].item(),
                    env.dof_pos[0,9].item(),env.dof_pos[0,10].item(),env.dof_pos[0,11].item(),
                    env.dof_pos[0,12].item(),env.dof_pos[0,13].item()]
            if i==(TRAJ_ITH*int(env.max_episode_length)-1):
                save_matrix_to_json(rl_traj, TRAJ_FILE_NAME)
                print('Exported trajectory as ',TRAJ_FILE_NAME)

        #print('[',env.dof_pos[0,0].item(),',',env.dof_pos[0,1].item(),',',env.dof_pos[0,2].item(),',',
        #    env.dof_pos[0,3].item(),',',env.dof_pos[0,4].item(),',',env.dof_pos[0,5].item(),',',
        #    env.dof_pos[0,6].item(),',',env.dof_pos[0,7].item(),',',env.dof_pos[0,8].item(),',',
        #    env.dof_pos[0,9].item(),',',env.dof_pos[0,10].item(),',',env.dof_pos[0,11].item(),',',
        #    env.dof_pos[0,12].item(),',',env.dof_pos[0,13].item(),'], ')


if __name__ == '__main__':
    EXPORT_POLICY = True
    RECORD_FRAMES = False
    MOVE_CAMERA = False
    EXPORT_TRAJ = False
    TRAJ_FILE_NAME='rl_traj_init_to_greet0.json'
    #TRAJ_FILE_NAME='rl_traj_greet0_to_greet1.json'
    args = get_args()
    play(args)
